<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>eCourts Cause List Downloader</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font */
        body { font-family: 'Inter', sans-serif; }
        /* Simple animation for loading state */
        .spinner {
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen p-4 md:p-8">
    <script>
        // --- MOCK DATA SIMULATING REAL-TIME API RESPONSE ---
        // This simulates the data we would scrape or fetch from the newdelhi.dcourts.gov.in backend
        const MOCK_COMPLEXES = [
            { id: 'patiala', name: 'Patiala House Courts' },
            { id: 'tis_hazari', name: 'Tis Hazari Courts' },
            { id: 'karkardooma', name: 'Karkardooma Courts' },
        ];

        const MOCK_JUDGES = {
            'patiala': [
                { id: '101', name: 'Ms. Aruna Puri, CMM' },
                { id: '102', name: 'Mr. Vivek Sharma, ASJ' },
                { id: '103', name: 'Ms. Meenu Kaushik, MM' },
            ],
            'tis_hazari': [
                { id: '201', name: 'Dr. Neera Bhatia, ASJ' },
                { id: '202', name: 'Mr. Ritesh Singh, CMM' },
            ],
            'karkardooma': [
                { id: '301', name: 'Mr. Rajesh Goel, ADJ' },
                { id: '302', name: 'Ms. Sunita Gupta, ASJ' },
                { id: '303', 'name': 'Mr. Alok Kumar, MM' },
            ]
        };
        
        // --- CORE MOCKING FUNCTIONS ---

        function _mock_fetch_complexes() {
            // Simulates fetching the list of court complexes in real time
            return new Promise(resolve => {
                setTimeout(() => resolve(MOCK_COMPLEXES), 500);
            });
        }

        function _mock_fetch_judges(complexId) {
            // Simulates fetching the list of judges (courts) based on the complex ID
            return new Promise(resolve => {
                setTimeout(() => resolve(MOCK_JUDGES[complexId] || []), 500);
            });
        }
        
        function _mock_download_pdf(judgeName, complexName, date) {
            // Simulates the actual POST request to the court server that triggers PDF generation,
            // followed by a server response with the PDF content (or a link).
            return new Promise((resolve, reject) => {
                const isSuccess = Math.random() > 0.1; // 90% success rate mock
                
                // Simulate network latency and server generation time
                const latency = 1500 + Math.random() * 1000; 

                setTimeout(() => {
                    if (isSuccess) {
                        // Create a mock PDF file (using text Blob for simplicity)
                        const content = `Cause List for ${judgeName} at ${complexName} on ${date}`;
                        const blob = new Blob([content], { type: 'application/pdf' });
                        const url = URL.createObjectURL(blob);
                        
                        // Simulate the download trigger
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `${complexName.replace(/\s/g, '_')}_${judgeName.replace(/[^a-zA-Z0-9]/g, '')}_${date.replace(/-/g, '')}.pdf`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);

                        resolve(`Successfully downloaded Cause List for: ${judgeName}`);
                    } else {
                        reject(`Failed to generate PDF for ${judgeName}. (Server Error Mock)`);
                    }
                }, latency);
            });
        }

        // --- APPLICATION STATE AND LOGIC ---
        
        let appState = {
            complexes: [],
            judges: [],
            selectedComplexId: null,
            selectedDate: new Date().toISOString().split('T')[0] // Default to today
        };

        const elements = {
            complexSelect: null,
            dateInput: null,
            judgesList: null,
            downloadAllBtn: null,
            statusMessage: null
        };
        
        // Utility to display status messages
        function setStatus(message, isError = false) {
            if (elements.statusMessage) {
                elements.statusMessage.textContent = message;
                elements.statusMessage.className = `p-3 mt-4 rounded-lg font-medium text-sm transition duration-300 ${
                    isError ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'
                }`;
                // Auto-clear after a few seconds
                clearTimeout(window.statusTimer);
                window.statusTimer = setTimeout(() => {
                    elements.statusMessage.textContent = '';
                    elements.statusMessage.className = 'mt-4';
                }, 8000);
            }
        }
        
        // 1. Initial Load: Fetch Court Complexes
        async function loadCourtComplexes() {
            try {
                elements.complexSelect.innerHTML = '<option value="" disabled>Loading Complexes...</option>';
                const complexes = await _mock_fetch_complexes();
                appState.complexes = complexes;
                
                let options = '<option value="" selected disabled>Select Court Complex</option>';
                complexes.forEach(c => {
                    options += `<option value="${c.id}">${c.name}</option>`;
                });
                elements.complexSelect.innerHTML = options;
                elements.complexSelect.disabled = false;

            } catch (error) {
                setStatus('Error loading court complexes. Please try again.', true);
                console.error("Load Complexes Error:", error);
            }
        }

        // 2. Cascade: Fetch Judges/Courts
        async function handleComplexChange(event) {
            const complexId = event.target.value;
            appState.selectedComplexId = complexId;
            
            // Get complex name for display/download
            const complex = appState.complexes.find(c => c.id === complexId);
            const complexName = complex ? complex.name : 'Unknown Complex';
            
            elements.judgesList.innerHTML = `
                <div class="flex items-center space-x-2 p-4 text-indigo-600">
                    <div class="spinner w-5 h-5 border-2 border-indigo-600 rounded-full"></div>
                    <span>Fetching Judges for ${complexName}...</span>
                </div>
            `;
            elements.downloadAllBtn.disabled = true;

            try {
                const judges = await _mock_fetch_judges(complexId);
                appState.judges = judges;
                renderJudgesList(complexName);
            } catch (error) {
                setStatus('Error fetching judges list.', true);
                appState.judges = [];
                renderJudgesList(complexName);
            }
        }

        // 3. Render List of Judges/Courts
        function renderJudgesList(complexName) {
            const date = appState.selectedDate;
            
            if (appState.judges.length === 0) {
                elements.judgesList.innerHTML = `<p class="text-center text-gray-500 p-8">No Judges found for ${complexName}.</p>`;
                elements.downloadAllBtn.disabled = true;
                return;
            }
            
            let listHtml = `<div class="p-4 bg-indigo-50/50 rounded-t-lg font-semibold text-indigo-800 border-b border-indigo-200">
                                ${appState.judges.length} Judges/Courts Found for ${complexName} on ${date}
                            </div>
                            <ul class="divide-y divide-gray-200">`;
            
            appState.judges.forEach(judge => {
                listHtml += `
                    <li class="p-4 flex justify-between items-center hover:bg-white transition duration-150">
                        <span class="text-gray-800 font-medium">${judge.name}</span>
                        <button 
                            id="btn-${judge.id}"
                            onclick="handleSingleDownload('${judge.id}', '${judge.name}', '${complexName}', '${date}')" 
                            class="download-btn bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-semibold hover:bg-blue-700 transition duration-300 shadow-md">
                            Download PDF
                        </button>
                    </li>
                `;
            });
            listHtml += '</ul>';
            
            elements.judgesList.innerHTML = listHtml;
            elements.downloadAllBtn.disabled = false;
        }

        // 4. Handle Single PDF Download
        async function handleSingleDownload(judgeId, judgeName, complexName, date) {
            const button = document.getElementById(`btn-${judgeId}`);
            button.disabled = true;
            const originalText = button.textContent;
            button.innerHTML = '<div class="spinner w-4 h-4 border-2 border-white rounded-full mr-2 inline-block"></div> Generating...';

            try {
                const result = await _mock_download_pdf(judgeName, complexName, date);
                setStatus(result);
            } catch (error) {
                setStatus(error, true);
            } finally {
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }

        // 5. Handle Bulk "Download All" (The Key Requirement)
        async function handleBulkDownload(complexName, date) {
            if (appState.judges.length === 0) {
                setStatus("No judges to download for the selected complex.", true);
                return;
            }

            const allButtons = document.querySelectorAll('.download-btn');
            const bulkButton = elements.downloadAllBtn;

            allButtons.forEach(btn => btn.disabled = true);
            bulkButton.disabled = true;
            const originalText = bulkButton.textContent;
            
            let successCount = 0;
            let failureCount = 0;
            
            bulkButton.innerHTML = `<div class="spinner w-4 h-4 border-2 border-white rounded-full mr-2 inline-block"></div> Starting Bulk Download...`;
            
            // Use Promise.allSettled to wait for ALL downloads, regardless of individual success/failure
            const downloadPromises = appState.judges.map(judge => {
                const judgeButton = document.getElementById(`btn-${judge.id}`);
                judgeButton.innerHTML = '<div class="spinner w-4 h-4 border-2 border-white rounded-full mr-2 inline-block"></div> Generating...';
                
                // Track progress
                const trackProgress = (status) => {
                    if (status === 'fulfilled') successCount++;
                    if (status === 'rejected') failureCount++;
                    
                    bulkButton.textContent = `Downloaded ${successCount}/${appState.judges.length}. Failed: ${failureCount}`;
                    
                    if (successCount + failureCount === appState.judges.length) {
                         // Final Status update
                        if (failureCount === 0) {
                            setStatus(`Bulk Download Complete! All ${successCount} PDF files were successfully generated and downloaded.`, false);
                        } else {
                            setStatus(`Bulk Download Finished with ${failureCount} errors. ${successCount} files were downloaded.`, true);
                        }
                    }
                };

                return _mock_download_pdf(judge.name, complexName, date)
                    .then(result => trackProgress('fulfilled'))
                    .catch(error => trackProgress('rejected'))
                    .finally(() => {
                        // Restore button text after attempt
                        judgeButton.textContent = 'Download PDF';
                    });
            });

            await Promise.allSettled(downloadPromises);

            // Restore UI state
            allButtons.forEach(btn => btn.disabled = false);
            bulkButton.textContent = originalText;
            bulkButton.disabled = false;
        }

        // 6. Init Function (Run on window load)
        window.onload = function() {
            elements.complexSelect = document.getElementById('courtComplexSelect');
            elements.dateInput = document.getElementById('causeListDate');
            elements.judgesList = document.getElementById('judgesListContainer');
            elements.downloadAllBtn = document.getElementById('downloadAllBtn');
            elements.statusMessage = document.getElementById('statusMessage');

            // Set default date to today
            elements.dateInput.value = appState.selectedDate;

            // Add event listeners
            elements.complexSelect.addEventListener('change', handleComplexChange);
            elements.dateInput.addEventListener('change', (e) => {
                appState.selectedDate = e.target.value;
                // Re-render the list to update the date in the heading
                if (appState.selectedComplexId) {
                    const complex = appState.complexes.find(c => c.id === appState.selectedComplexId);
                    if(complex) renderJudgesList(complex.name);
                }
            });

            // Initial fetch of complexes
            loadCourtComplexes();
        };

        // Expose functions to the global scope for HTML event handlers
        window.handleSingleDownload = handleSingleDownload;
        window.handleBulkDownload = (complexId) => {
            const complex = appState.complexes.find(c => c.id === complexId);
            if (complex) handleBulkDownload(complex.name, appState.selectedDate);
        };
    </script>

    <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-2xl p-6 md:p-10 border-t-8 border-indigo-600">
        <header class="mb-8">
            <h1 class="text-3xl font-extrabold text-gray-900 mb-1">Dynamic Court Cause List Downloader</h1>
            <p class="text-gray-500">Select the date and court complex to retrieve real-time cause lists.</p>
        </header>

        <!-- INPUTS: Date and Complex Selection -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 p-5 border border-gray-200 rounded-xl bg-gray-50">
            <div>
                <label for="causeListDate" class="block text-sm font-medium text-gray-700 mb-2">1. Select Cause List Date</label>
                <input type="date" id="causeListDate" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 transition duration-150">
            </div>
            <div>
                <label for="courtComplexSelect" class="block text-sm font-medium text-gray-700 mb-2">2. Select Court Complex</label>
                <select id="courtComplexSelect" class="w-full p-3 border border-gray-300 rounded-lg bg-white appearance-none disabled:bg-gray-200" disabled>
                    <option selected disabled>Loading Complexes...</option>
                </select>
            </div>
        </div>

        <!-- Action Panel -->
        <div id="judgesListPanel" class="border border-gray-300 rounded-xl overflow-hidden shadow-lg">
            
            <!-- Download All Button (The Key Feature) -->
            <div class="p-4 bg-indigo-600">
                 <button 
                    id="downloadAllBtn"
                    onclick="handleBulkDownload(appState.selectedComplexId)"
                    class="w-full flex items-center justify-center space-x-2 py-3 px-4 bg-yellow-400 text-indigo-900 font-bold rounded-lg shadow-xl hover:bg-yellow-300 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed text-lg"
                    disabled>
                    <!-- Icon for download all -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download-cloud"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a5 5 0 0 1 0 10H5a2 2 0 0 1 0-4"/><path d="m9 16 3 3 3-3"/><path d="M12 19V9"/></svg>
                    <span>Download All Court Cause Lists (PDFs)</span>
                </button>
            </div>

            <!-- Judges/Courts List -->
            <div id="judgesListContainer" class="min-h-[150px]">
                <p class="text-center text-gray-500 p-8">Select a date and court complex to view the list of judges/courts.</p>
            </div>
        </div>

        <!-- Status Message Area -->
        <div id="statusMessage" class="mt-4"></div>

        <!-- Disclaimer -->
        <div class="mt-10 pt-4 border-t border-gray-200 text-sm text-gray-500">
            <p><strong>NOTE ON REAL-TIME FETCHING:</strong> Direct client-side web scraping and PDF generation from external government sites like eCourts is prevented by browser security (CORS) and site protections (CAPTCHA, ViewState). This UI simulates the full user experience, demonstrating the required cascading logic and the "Download All" feature using robust, asynchronous mock functions.</p>
        </div>
    </div>
</body>
</html>
